Документация на Системата за Управление на Доброволци

Част 1: Въведение

1. Заглавие на проекта
Система за Управление на Доброволци

2. Цел
Разработване на уеб-базирана информационна система, която подпомага управлението и координацията на събития, 
организирани с участието на доброволци. Системата улеснява регистрацията на потребители, организирането на събития, 
разпределението на задачи и проследяването на участието и напредъка.

3. Потребители и Роли
Системата включва три основни потребителски роли:

Администратор: Управлява всички потребители, събития и доклади и има пълен достъп до системата.

Организатор: Създава и управлява събития, разпределя задачи и следи напредъка на доброволците.

Доброволец (Потребител): Регистрира се за събития, изпълнява възложени задачи и следи напредъка си.

4. Основни Функционалности
Регистрация и автентикация на потребители

Контрол на достъпа според ролите

Създаване, редактиране и анулиране на събития

Разпределение на задачи и проследяване на напредъка

Генериране на доклади (при приключване или отказване на събития)

Адаптивен потребителски интерфейс за настолни и мобилни устройства

5. Технологии
Сървър (Backend): ASP.NET Core MVC

Интерфейс (Frontend): Bootstrap 5, jQuery, AJAX

База данни: SQLite

6. Функционални Цели
Предоставяне на сигурна и интуитивна платформа за организиране на доброволчески събития

Улесняване на управлението на задачи и създаването на доклади

Осигуряване на отчетност и последователност чрез контрол на достъпа по роли

7. Нефункционални Цели
Скалируема архитектура за бъдещи разширения

Чист и адаптивен интерфейс за по-добра достъпност

Добре документиран код за лесна поддръжка

8. Обобщение
Системата подпомага училища, неправителствени организации и общини в организирането и проследяването на доброволчески дейности.
Тя включва инструменти за планиране на събития, управление на участници и оценка на резултатите, като същевременно поддържа ясен 
и сигурен работен процес с различни потребителски роли.

---

Част 2: Управление на системата
1. Управление на потребители
Администраторът може да:

Преглежда, добавя, редактира или премахва потребители

Задава роли (Администратор, Организатор, Доброволец)

Организаторът може да:

Вижда доброволците, които участват в неговите събития

Доброволецът може да:

Редактира своята собствена профилна информация

2. Управление на събития
Организаторът може да:

Създава нови събития с заглавие, описание, категория, местоположение и дата

Редактира или анулира събития

Преглежда записванията на доброволци

Администраторът може да:

Преглежда и управлява всички събития в системата

Активира отново анулирани или приключени събития, ако е необходимо

Доброволецът може да:

Разглежда активни събития и да се записва за тях

Преглежда детайли за събития и възложени задачи

3. Управление на задачи
Организаторът може да:

Добавя задачи към събития с заглавие, описание, краен срок и статус

Назначава задачи на доброволци

Следи напредъка и изпълнението на задачите

Доброволецът може да:

Вижда възложените му задачи

Отбелязва задачи като завършени

Администраторът може да:

Преглежда всички задачи в системата

Променя статуса на задачи (ако е необходимо)

4. Управление на доклади
Организаторът може да:

Подаде задължителен доклад при приключване или отказване на събитие

Преглежда доклади за събития, които управлява

Администраторът може да:

Преглежда всички доклади

Вижда доклади в таблиците „Минали събития“ и „Приключени събития“

5. Табло (Dashboard) – Основни функции
Таблото на администратора включва:

Графики за приходи (ако е разширено), статистика на доброволци, топ събития

Информационни карти със статистики за събития и задачи

Хронология на последните действия

Таблото на персонала включва:

Списък с възложени събития, задачи и визуални обобщения

Интерактивни карти и връзки към детайли

6. Филтриране и търсене
Всички основни таблици включват търсачки и филтри (напр. по категория, статус)

Доброволците могат да намират събития според наличност и интереси

7. Модали и AJAX
Действия по събития и задачи използват модални прозорци за по-гладко потребителско изживяване

AJAX се използва за промени в реално време без презареждане на страницата

Част 3: Структура на базата данни и API преглед
1. Преглед на схемата на базата данни
Таблица: Users (Потребители)

Id (PK) – първичен ключ

Username – потребителско име

PasswordHash – хеширана парола

Role – роля (Admin, Organizer, Volunteer)

Email – имейл

FullName – пълно име

Таблица: Events (Събития)

Id (PK) – първичен ключ

Title – заглавие

Description – описание

Category – категория

Location – местоположение

Date – дата

Status – статус (Active, Cancelled, Completed)

OrganizerId (FK към Users) – организатор

Таблица: Tasks (Задачи)

Id (PK) – първичен ключ

EventId (FK към Events) – към кое събитие принадлежи

Title – заглавие на задачата

Description – описание

Deadline – краен срок

Status – статус (Pending, Completed, Cancelled)

Таблица: Reports (Доклади)

Id (PK) – първичен ключ

EventId (FK към Events)

OrganizerId (FK към Users)

Content – съдържание на доклада

CreatedAt – дата и час на създаване

ReportType – тип (Completion, Cancellation)

Таблица: EventParticipants (Участници в събития)

Id (PK) – първичен ключ

EventId (FK) – събитие

UserId (FK) – потребител

2. Преглед на API Endpoint-и (методи на MVC контролери)
AccountController
Login() / Logout() – вход и изход

Register() – регистрация на нов потребител

Profile() – преглед и редакция на профил

AdminController
Users() – управление на потребители

Events() – преглед на всички събития

Reports() – преглед на всички доклади

EventsController
Create() – създаване на ново събитие

Edit(id) – редакция на събитие

Details(id) – подробности за събитие

Cancel(id) – отказване на събитие (пренасочва към форма за доклад)

Complete(id) – приключване на събитие (пренасочва към форма за доклад)

TasksController
Add(eventId) – добавяне на задача към събитие

Edit(id) – редактиране на задача

Delete(id) – изтриване на задача

ReportsController
Create(eventId, type) – създаване на доклад за събитие

View(id) – преглед на съдържанието на доклад

VolunteerController
MyEvents() – събития, в които потребителят участва

AvailableEvents() – списък с достъпни събития

Join(eventId) – доброволец се записва за събитие

3. Пример за начални данни (Seeding)
Базови потребители и примерни събития се въвеждат чрез SQL скриптове или EF Core миграции за целите на разработка и тестване.

Част 4: Деплоймънт, Тестване и Бъдещи Подобрения

1. Ръководство за деплоймънт
Локален деплоймънт
Необходими инструменти: .NET 8 SDK, SQLite, Visual Studio или VS Code

Клониране на репозиторито:

bash
Copy
Edit
git clone https://github.com/yourusername/VolunteerManagement.git
cd VolunteerManagement
Конфигуриране на appsettings.json с локален SQLite connection string

Прилагане на миграции:

bash
Copy
Edit
dotnet ef database update
Стартиране на приложението:

bash
Copy
Edit
dotnet run
Отвори https://localhost:5001 в браузър

Деплоймънт с Docker
Включени са Dockerfile и по избор docker-compose.yml

Настрой .env или compose файл с креденшъли (ако се използва външна база)

Стартиране:

bash
Copy
Edit
docker-compose up -d --build
Render.com (Безплатен хостинг)
Свържи GitHub репозиторито

Избери Docker среда

Задай команди за build/run и средови променливи

Автоматично разгръщане при push към main

2. Стратегия за тестване
Ръчно тестване
Тествай вход с всеки тип роля чрез тестови акаунти

Провери CRUD операциите за събития и задачи

Валидирай процеса на създаване на доклади

Автоматизирано тестване (по избор)
Юнит тестове с помощта на xUnit / MSTest

Помисли за интеграционни тестове на контролери

3. Практики за сигурност
Паролите се хешират чрез ASP.NET Identity

Авторизация според роля на ниво контролер

Валидация на всички формуляри – както на клиента, така и на сървъра

4. Бъдещи подобрения
Изпращане на имейл известия за предстоящи събития

Календарен изглед за доброволци

Аналитично табло със статистика за участие

Възможност за прикачване на файлове към доклади (изображения, PDF)

Разширени административни справки с експорт в Excel/PDF

5. Документация и поддръжка
Всички контролери и изгледи съдържат коментари в кода

README файл и пълна документация се намират в корена на проекта

Приемат се предложения и разширения чрез pull requests
